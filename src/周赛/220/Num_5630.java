import org.junit.Test;

import java.util.Arrays;

/**
 * @author zxs666
 * @date 2020/12/20 10:42
 */
public class Num_5630 {


    @Test
    public void test() {
        int[] nums = {544,914,868,579,654,594,577,564,905,417,436,26,901,618,620,108,971,888,961,609,617,811,814,872,503,959,621,746,644,555,80,220,192,113,219,950,889,751,571,508,751,124,167,966,35,795,336,951,284,186,432,673,629,972,952,107,134,756,301,362,940,186,386,919,789,188,662,422,917,198,827,305,657,471,478,728,881,323,67,111,299,269,165,328,890,321,541,257,637,919,876,447,576,260,203,314,252,266,419,327,429,196,743,996,280,392,749,804,313,833,148,573,37,639,345,327,662,145,643,877,148,628,807,618,881,577,222,148,842,310,34,559,828,479,631,933,386,407,568,22,973,443,239,219,560,153,463,348,272,561,925,453,849,646,497,641,43,57,394,430,308,865,749,566,689,209,941,62,383,973,252,340,302,961,703,30,545,890,96,438,601,759,649,148,449,437,117,417,792,140,118,455,893,55,155,527,685,996,155,233,824,232,339,429,83,967,905,928,943,448,723,603,404,169,132,96,302,34,682,487,356,229,580,425,481,760,755,162,623,881,687,10,512,600,981,809,495,942,615,717,266,197,216,683,338,940,902,636,848,802,186,704,363,93,516,909,347,991,817,567,500,648,672,20,384,608,726,38,474,74,358,884,385,671,65,179,172,449,973,263,397,876,266,670,86,835,386,167,824,593,698,42,241,569,487,362,867,438,368,657,616,326,215,773,946,485,570,719,375,840,255,20,500,336,440,10,596,468,140,959,844,588,72,88,446,608,238,310,927};
                System.out.println(maximumUniqueSubarray(nums));
    }

    public int maximumUniqueSubarray(int[] nums) {
        if (nums.length == 0)
            return 0;
        int[] flag = new int[10000 + 2];
        int[] sum = new int[nums.length];
        sum[0] = nums[0];
        for (int i = 1; i < nums.length; i++)
            sum[i] = sum[i - 1] + nums[i];
        Arrays.fill(flag, -1);
        flag[nums[0]] = 0;
        int res = nums[0];
        int start = -1;
        for (int i = 1; i < nums.length; i++) {

            if (flag[nums[i]] == -1) {
                if (start == -1)
                    res = Math.max(sum[i], res);
                else
                    res = Math.max(res, sum[i] - sum[start]);
            } else {
                if(flag[nums[i]]>=start){
                    start=flag[nums[i]];
                    res=Math.max(res,sum[i]-sum[start]);
                }
                else
                    res=Math.max(res,sum[i]-sum[start]);
            }
            flag[nums[i]] = i;

        }
        return res;
    }
}
